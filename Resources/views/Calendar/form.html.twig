{% extends "TisseoBoaBundle::container.html.twig" %}

{% form_theme calendarForm 'TisseoBoaBundle:Form:fields.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    {% stylesheets 'components/jquery-ui/themes/smoothness/jquery-ui.css'
                   filter='cssrewrite' output='css/calendar_boa.css' %}
        <link rel="stylesheet" href="{{ asset_url }}?{{ assets_version }}" />
    {% endstylesheets %}
{% endblock %}

{% block main_content %}
    <h1>{{ title|trans({}, 'default') }}</h1>
    <hr/>

    {{ form_start(calendarForm) }}
		{{ form_errors(calendarForm) }}
		{{ form_widget(calendarForm._token) }}
		<div id='calendar-fields' class="form form-edit col-md-12">
			<div class="col-md-4">
				{{ form_row(calendarForm.name) }}
			</div>
			<div class="col-md-2" >
				{{ form_row(calendarForm.calendarType, { 'attr': {'class': 'select-type'}}) }}
			</div>
			{% if calendarForm.calendarType.vars.value == 'mixte' or calendarForm.calendarType.vars.value== 'periode' %}			
				<div id='div-line' class="col-md-3">			
			{% else %}
				<div id='div-line' class="hide col-md-3">
			{% endif %}
					{{ form_row(calendarForm.lineVersion, { 'attr': {'class': 'select-line-version'}}) }}
				</div>
		</div>

		<div id="divRemoveElement" 
				style="display: none;" 
				data-prototype="{% filter escape %}{% include 'TisseoBoaBundle:CalendarElement:remove_form.html.twig' with { 'form': calendarForm.remove_element.vars.prototype } %}{% endfilter %}"
		>
		</div>
			
		<table id='calendar_elements'
				class="table table-hover dataTable no-footer" 
				data-prototype="{% filter escape %}{% include 'TisseoBoaBundle:CalendarElement:form.html.twig' with { 'form': calendarForm.calendar_element.vars.prototype } %} {% endfilter %}"
		>	
		<thead>
			<th>Ordre</th>
			<th>Début</th>
			<th>Fin</th>
			<th>Calendrier</th>
			<th>Signe</th>
			<th>Récurrence</th>
			<th>Supprimer</th>
		</thead>
		<tbody>
		{% set line_counter = 0 %}
		{% for calendar_element in calendarElements %}
			{% set line_counter = line_counter+1 %}
			<tr>
				<input type="hidden" id="id_{{ line_counter }}" value="{{  calendar_element.id }}">
				<td> {{  calendar_element.rank }} </td>
				<td> {{  calendar_element.startDate|date("d/m/Y") }} </td>
				<td> {{  calendar_element.endDate|date("d/m/Y") }} </td>
				{% set includedCalendar = "" %}
				{% if calendar_element.includedCalendar is not null %}
					{% set includedCalendar = calendar_element.includedCalendar.getName() %}
				{% endif %}
				<td> {{ includedCalendar }} </td>
				<td> {{  calendar_element.operator }} </td>
				<td> {{  calendar_element.interval }} </td>
				<td> <input type="checkbox"  class="remove_checkbox"></td>				
			</tr>
		{% endfor %}
		</tbody></table>	

		<div class="row">
			<div class="col-md-11">
				<a class="btn btn-default" id="add_element" href="#"><span class="glyphicon glyphicon-plus"></span>{{'global.add'|trans({}, 'messages')}}</a>
			</div>
			
			<div class="col-md-1">
				<a class="btn btn-default"  id="empty_elements" href="#"><span class="glyphicon glyphicon-remove"></span>{{'global.empty'|trans({}, 'messages')}}</a>
			</div>
		</div>
		
		<hr>
		<button type="submit" id="save-form" class="btn btn-success"> <span class="glyphicon glyphicon-pencil"></span>
			 {{'global.save'|trans}}
		</button>			
	{{ form_end(calendarForm, {'render_rest': false})}}

	<div class="calendar_div">
		<form id="calendarDisplayForm">
			<div class="row">
				<div class="col-md-2">
					<input type="text" id='start_date_picker' name="start_date" class='input-date calendar_date' readonly>
				</div>
				<div class="col-md-2">
					<input type="text" id='end_date_picker'  name="end_date" class='input-date calendar_date' readonly>
				</div>
				<div class="col-md-2">
					<button type="button" id='refresh_button' class="calendar_button btn" data-url="{{ path('tisseo_boa_json_bitmask') }}">
					<span class="glyphicon glyphicon-refresh"></span>
						Rafraîchir
					</button>
				</div>
			</div>
		</form>
		<div id='calendar_view' class="calendar_view">
		</div>
	</div>
{% endblock %}

{% block javascripts %}
   <script>
		require(['jquery', 'jquery_ui_autocomplete', 'bootstrap/datepicker', 'bootstrap/datepicker/{{ app.request.locale }}'], function($) {

			function display_dates_save() {
				if( calendarID != '' )  { 
					sessionStorage.setItem(calendarID, $("#start_date_picker").val() + '##' + $("#end_date_picker").val());
				}
			}
		
			function display_dates_validation(item) {		
				var startDate=$("#start_date_picker").val().split('/');
				var formattedStart=startDate[2] + startDate[1] + startDate[0];
				var endDate=$("#end_date_picker").val().split('/');
				var formattedEnd=endDate[2] + endDate[1] + endDate[0];
				
				if(formattedStart > formattedEnd) {
					alert("la date de début ne peut être supérieure à la date de fin");
					item.focus();
					return false;
				}	
				
				return true;
			}		
			
		var previousDate;
		$('.input-date').datepicker({
				language: '{{ app.request.locale }}',
				todayHighlight: true,
				autoclose: true
			})
			// Save date picked
			.on('show', function () {
				previousDate = $(this).val();
			})
			// Replace with previous date if no date is picked or if same date is picked to avoid toggle error
			.on('hide', function () {
				if ($(this).val() === '' || $(this).val() === null) {
					$(this).val(previousDate).datepicker('update');
				}
			})
			.on('changeDate', function(e) {
				if (!($(this).val() === '' || $(this).val() === null)) {
					if(!display_dates_validation($(this))) {
						return false;
					}
					
					display_dates_save();
					$(e.target.name).datepicker('update');					
				}
			});
		
			var calendarID="{{ calendarId }}";
			
			var data_stored = null;
			
			if( calendarID != '' )  { 
				data_stored = sessionStorage.getItem(calendarID);
				if( data_stored != null )  { 
					var res = data_stored.split("##");
					$('#start_date_picker').val(res[0]);
					$('#start_date_picker').datepicker('update');
					$('#end_date_picker').val(res[1]);
					$('#end_date_picker').datepicker('update');
				}
			}	
			if( data_stored == null )  { 
				var today = new Date();
				var firstDate = new Date(today.getFullYear(), today.getMonth(), 1);
				var lastDate = new Date(today.getFullYear(), today.getMonth()+2, 0);
				
				var month = (firstDate.getMonth()<10 ? "0" + firstDate.getMonth() : firstDate.getMonth());
				var sFirstDate = '01/' + month + '/' + firstDate.getFullYear();
				$('#start_date_picker').val(sFirstDate);	
				$('#start_date_picker').datepicker('update');
				
				month = (lastDate.getMonth()<10 ? "0" + (lastDate.getMonth()+1) : (lastDate.getMonth()+1));
				var sLastDate = lastDate.getDate() + '/' + month + '/' + firstDate.getFullYear();
				$('#end_date_picker').val(sLastDate);
				$('#end_date_picker').datepicker('update');
			}
			
			function displayCalendar($FirstDate, $LastDate, $calendarPattern){
				var Beginning = new Date($FirstDate);
				Beginning.setHours(0,0,0,0);
				var Ending = new Date($LastDate);
				Ending.setHours(0,0,0,0);
				
				var table_html = "<table class='calendar_table'>";
				table_html += "<thead><tr><th></th><th>Lu</th><th>Ma</th><th>Me</th><th>Je</th><th>Ve</th><th>Sa</th><th>Di</th></tr></thead>";
				
				//days before month
				if(Beginning.getDay() != 1){
					table_html += "<tr>";
					table_html += "<td>" + Beginning.toDateString().split(' ')[1] + " " + Beginning.toDateString().split(' ')[3] + "</td>";
					for (var diffDays=(Beginning.getDay()+6)%7; diffDays >0; diffDays--) {
						table_html += "<td></td>";
					}
				}
				
				var pattern_index = 1;				
				var changeMonth = false;
				for (var currentDate = Beginning; currentDate <= Ending; currentDate.setDate(currentDate.getDate() + 1)) {
					var td_class = "calendar_cell ";
					if(changeMonth) {
						if(currentDate.getDate() > 7) { 
							td_class += "last_week_of_month ";
						} else {
							if(currentDate.getDate() == 1) td_class += "first_day_of_month ";
							if(currentDate.getDate() >= 1) td_class += "first_week_of_month ";
							if(currentDate.getDay() == 0) changeMonth = false;
						}						
					}
					if($calendarPattern[pattern_index] ==  1)  {
						td_class += "accessible ";
					} else {
						td_class += "inaccessible ";
					}
					table_html += "<td class='" + td_class + "'>" + currentDate.getDate() + "</td>";

					if(currentDate.getDay() == 0){
						if(+currentDate == +Ending) {
							table_html += "</tr>";
						} else {
							table_html += "</tr><tr>";
							
							var next_week_month = new Date(currentDate.getTime());
							next_week_month.setDate(next_week_month.getDate() + 7);
							if(next_week_month.getMonth() != currentDate.getMonth()) {
								changeMonth = true;
								table_html += "<td class='month_cell'>" + next_week_month.toDateString().split(' ')[1] + " " + next_week_month.toDateString().split(' ')[3] + "</td>";
							} else {
								table_html += "<td class='month_cell'></td>";
							}
						}
					}
					pattern_index += 1;
				}
				
				table_html += "</table>";
				
				$('#calendar_view').html(table_html);
			}
			
			$('#refresh_button').click(
				function(event) {
					if( calendarID == '' ) {
						alert("Vous devez d'abord enregistrer le calendrier");
						return false;
					}
					var url = $(this).attr('data-url');
					
					var start_array = $('#start_date_picker').val().split("/");
					var start_date  =  start_array[2] + '-' + start_array[1] + '-' + start_array[0];
					
					var end_array = $('#end_date_picker').val().split("/");
					var end_date  =  end_array[2] + '-' + end_array[1] + '-' + end_array[0];
					
					var objData = {
						id: parseInt(calendarID),
						startDate: start_date,
						endDate: end_date
					};

					$.ajax({ url: url, data : objData, type: 'POST',
						success : function(data){
							displayCalendar(start_date, end_date, data.content);
						}
					});
				}
			);
			
			var $collectionHolder = $('#calendar_elements');
			var $removeCollectionHolder = $('#divRemoveElement');
	
			function init_autocomplete(){
				$("input[data-id=calendar]").autocomplete({
					source: function (request, response) {
						var objData = { term: request.term };
						var url = $(this.element).attr('data-url');
						$.ajax({ url: url, dataType: "json", data : objData,  type: 'POST',
							success: function (data) {
								response($.map(JSON.parse(data.content), function (item) {									
									return {				
										label: item.name, 
										value: item.name, 
										id: item.id
									};
								}));
							},
						});
					},
					select: function (event, ui) {
						var hidden_id = '#' + $(this).attr('id').replace("calendarName", "includedCalendar");
						$(hidden_id).val(ui.item.id);
					},					
					minLength: 3,
					delay: 300
				});
			};
						
			function add(){
				var $index = $('#calendar_elements >tbody >tr').length + 1;
				
				var $prototype = $collectionHolder.attr('data-prototype');
				var $newLine = $prototype.replace(/__name__/g, $index);

				$('#calendar_elements >tbody')
					.append("<tr>" + 
								$newLine + 
								"<td><a class=\"btn btn-default\" href=\"#\"><span class=\"glyphicon glyphicon-remove\"></span>{{'global.delete'|trans({}, 'messages')}}</a></td></tr>");
				
				init_autocomplete();

				$('.element-date').datepicker({
					language: '{{ app.request.locale }}',
					todayHighlight: true,
					startView: 1,
					autoclose: true
				});
			};

			$('#empty_elements').click(function(event) {
				if(!confirm("{{'calendar.empty_elements'|trans({}, 'default')}}") )
					return false;
				
				$('#calendar_elements > tbody  > tr').each(function() {
					var checkbox = $(this).find("input.remove_checkbox[type=checkbox]");
					if( checkbox.length ){
						checkbox.prop('checked', true);
						checkbox.triggerHandler( "click" );
					} else {
						$(this).remove();
					}
					$('#save-form').click();
				});
			});

			$( ".remove_checkbox" ).on( "click", function() {
				var $index = $(this).closest('tr').index() + 1; 
				if(this.checked) {					
					var $IdClass = '#id_' + $index;
					var $IdValue = $($IdClass).val();
					var $prototype = $removeCollectionHolder.attr('data-prototype');
					var $newInput = $prototype.replace(/__name__/g, $index).replace("%id_value%", $IdValue).replace(/%remove_class%/g, "class_remove_" + $index);
					$(this).closest('td').append($newInput);
				} else {
					var $name = "#boa_calendar_element_remove_element_" + $index + "_id";
					$($name).remove();
					$name = "#boa_calendar_element_remove_element_" + $index + "_remove";
					$($name).remove();
				}
			});
			
			$('#add_element').click(function(event) {
				add(); 
			});
			
			$('#calendar_elements').on('click',  "a", function(event) {
				event.preventDefault();
				if ($(this).text() === "{{'global.delete'|trans({}, 'messages')}}") { 
					$(this).closest("tr").remove(); 
				}
			});
			
			$('.select-type').change(function() {			
				if( $(this).val() == 'mixte' || $(this).val() == 'periode' ) {
					$('#div-line').removeClass('hide');
				} else {
					$('#div-line').addClass('hide');
					$('.select-line-version').val("");
				}
			});

			if( calendarID != '' )  { $("#refresh_button").click(); }
		 });
    </script>
{% endblock %}
